<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mr00ff&#39;s blog</title>
  
  <subtitle> mr00ff</subtitle>
  <link href="https://www.sysxo.com/atom.xml" rel="self"/>
  
  <link href="https://www.sysxo.com/"/>
  <updated>2022-07-19T13:43:16.916Z</updated>
  <id>https://www.sysxo.com/</id>
  
  <author>
    <name>mr00ff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 20.04 编译 android 7.1.2 源码</title>
    <link href="https://www.sysxo.com/Ubuntu/Ubuntu%2020.04%20%E7%BC%96%E8%AF%91%20Android%207.1.2%20%E7%89%88%E6%9C%AC.html"/>
    <id>https://www.sysxo.com/Ubuntu/Ubuntu%2020.04%20%E7%BC%96%E8%AF%91%20Android%207.1.2%20%E7%89%88%E6%9C%AC.html</id>
    <published>2021-11-23T12:10:00.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Ubuntu 20.04.3</li><li>python 2.7.11</li><li>android 7.1.2 r8</li><li>lg nexus 5x</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="初始化依赖"><a href="#初始化依赖" class="headerlink" title="初始化依赖"></a>初始化依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y curl python git</span><br></pre></td></tr></table></figure><hr><h3 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">sudo chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;PATH=~/bin:$PATH&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &quot;export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><hr><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="android-仓库初始化"><a href="#android-仓库初始化" class="headerlink" title="android 仓库初始化"></a>android 仓库初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir AOSP</span><br><span class="line">cd AOSP</span><br><span class="line"><span class="meta">#</span><span class="bash"> 北方用 清华源 https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 南方用 华中科技大学源 git://mirrors.ustc.edu.cn/aosp/platform/manifest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此命令获取的是最新的 android 源码 android 12 (2021-11-23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取 android 7.1.2_r8 源码</span></span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-7.1.2_r8 --depth=1 --platform=auto</span><br></pre></td></tr></table></figure><h4 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 防止同步失败 记入同步过程日志</span></span><br><span class="line">sudo repo sync -c -j4 2&gt;&amp;1 | tee sync.log</span><br></pre></td></tr></table></figure><p>目前位置一切顺利 准备编译</p><h3 id="安装系统依赖"><a href="#安装系统依赖" class="headerlink" title="安装系统依赖"></a>安装系统依赖</h3><h4 id="安装-jdk"><a href="#安装-jdk" class="headerlink" title="安装 jdk"></a>安装 jdk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y openjdk-8-jdk</span><br></pre></td></tr></table></figure><h4 id="安装编译依赖"><a href="#安装编译依赖" class="headerlink" title="安装编译依赖"></a>安装编译依赖</h4><p>为啥要一行行, 方便排错哈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python-minimal libpython-stdlib python</span><br><span class="line">sudo apt-get install -y libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib</span><br><span class="line">sudo apt-get install -y bison gperf build-essential libncurses5:i386</span><br><span class="line">sudo apt-get install -y tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">sudo apt-get install -y dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install -y git-core gnupg zip curl zlib1g-dev gcc-multilib</span><br><span class="line">sudo apt-get install -y libc6-dev-i386 x11proto-core-dev libx11-dev</span><br><span class="line">sudo apt-get install -y unzip m4 lib32z-dev ccache libssl-dev</span><br></pre></td></tr></table></figure><h2 id="android-编译"><a href="#android-编译" class="headerlink" title="android 编译"></a>android 编译</h2><h3 id="编译初始化"><a href="#编译初始化" class="headerlink" title="编译初始化"></a>编译初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br></pre></td></tr></table></figure><h3 id="选择编译版本"><a href="#选择编译版本" class="headerlink" title="选择编译版本"></a>选择编译版本</h3><p>此处要选择编译的版本 比如 <code>aosp_arm-eng</code> , 还是<code>aosp_arm64-eng</code> ,此次实验机为 <code>nexus 5x</code> 就选 18 啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  选择编译版本</span></span><br><span class="line">lunch </span><br></pre></td></tr></table></figure><h3 id="执行编译"><a href="#执行编译" class="headerlink" title="执行编译"></a>执行编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j12 2&gt;&amp;1 | tee build.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除历史编译 如果没问题 请不要运行 否则全部重新编译啦</span></span><br><span class="line">sudo make clean</span><br></pre></td></tr></table></figure><p>最后来张完成纪念..这命令熟悉的让人心疼…别问  爱过…</p><p>还没有编译驱动哦,这个帖子就不说刷机的事了 等得空补上</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/mr00ff/sysxo_img/raw/master/imgs/image-20211123210137701.png"                      alt="image-20211123210137701"                ></p><hr><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="错误1-error-while-loading-shared-libraries-libncurses-so-5-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#错误1-error-while-loading-shared-libraries-libncurses-so-5-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="错误1: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory"></a>错误1: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</h3><p>在 Ubuntu 20.04 上 安装 <code>libncurses5:i386</code> 不会 新建 <code>libncurses.so.5</code> 来个软连接即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> error <span class="keyword">while</span> loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</span></span><br><span class="line">sudo apt-get install -y libncurses5:i386</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确定安装位置</span></span><br><span class="line">whereis libncurses.so</span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5</span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/lib/x86_64-linux-gnu/libncurses.so.6</span></span><br></pre></td></tr></table></figure><h3 id="错误-2-error-while-loading-shared-libraries-libtinfo-so-5-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#错误-2-error-while-loading-shared-libraries-libtinfo-so-5-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="错误 2: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory"></a>错误 2: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory</h3><p>一样 新系统上面不会建立 <code>libtinfo.so.5</code> 需要手动创建一个 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> error <span class="keyword">while</span> loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先看看安装过没</span></span><br><span class="line">whereis libtinfo</span><br><span class="line"><span class="meta">#</span><span class="bash">libtinfo: /usr/lib/x86_64-linux-gnu/libtinfo.a /usr/lib/x86_64-linux-gnu/libtinfo.so</span></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libtinfo.so /usr/lib/x86_64-linux-gnu/libtinfo.so.5</span><br></pre></td></tr></table></figure><h3 id="错误-3-flex-相关错误"><a href="#错误-3-flex-相关错误" class="headerlink" title="错误 3: flex 相关错误"></a>错误 3: flex 相关错误</h3><p>这个问题很奇妙 <code>apt-get</code> 安装的 <code>flex</code> 版本为 <code>2.6.35</code> 和源码包里的版本不同 错误也千奇百怪</p><p>解决方案是 用 源码包中 携带的 <code>flex-2.5.39</code> 重新编译一份到系统即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">FAILED: /bin/bash -c <span class="string">&quot;prebuilts/misc/linux-x86/flex/flex-2.5.39 -oout/host/linux-x86/obj/STATIC_LIBRARIES/libaidl-common_intermediates/aidl_language_l.cpp system/tools/aidl/aidl_language_l.ll&quot;</span></span></span><br><span class="line">flex-2.5.39: loadlocale.c:130:_nl_intern_locale_data: ?? &#x27;cnt &lt; (sizeof (_nl_value_type_LC_TIME) / sizeof (_nl_value_type_LC_TIME[0]))&#x27; ???</span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------</span></span><br><span class="line">whereis  flex</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载已安装 flex</span> </span><br><span class="line">sudo apt-get --purge remove flex </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用源码包下的flex 重新编译</span></span><br><span class="line">cd  /home/super_power/code/AOSP/android_7.1.2_r8/prebuilts/misc/linux-x86/flex</span><br><span class="line">tar zxf flex-2.5.39.tar.gz</span><br><span class="line">cd flex-2.5.39</span><br><span class="line">./configure</span><br><span class="line">sudo make -j12</span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置flex 软连接</span></span><br><span class="line">sudo ln -s /usr/local/bin/flex /home/super_power/code/AOSP/android_7.1.2_r8/prebuilts/misc/linux-x86/flex/flex-2.5.39</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="错误-4-jack-server-错误"><a href="#错误-4-jack-server-错误" class="headerlink" title="错误 4: jack-server 错误"></a>错误 4: jack-server 错误</h3><p>手动删除 java.security 中 对 ssl 证书的校验 重新编译即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接 jack 服务器错误</span></span><br><span class="line">Communication error with Jack server (35), try &#x27;jack-diagnose&#x27; or see Jack server log</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssl 证书错误哈</span></span><br><span class="line">SSL error when connecting to the Jack server. Try &#x27;jack-diagnose&#x27;</span><br><span class="line">SSL error when connecting to the Jack server. Try &#x27;jack-diagnose&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确定 jack-server 是否启动</span></span><br><span class="line">ps aux|grep jack-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束 jack-server 进程 重新启动编译即可</span></span><br><span class="line"> ./prebuilts/sdk/tools/jack-admin kill-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 java 配置文件中的证书校验</span></span><br><span class="line">cd /etc/java-8-openjdk/security/</span><br><span class="line">sudo cp -a java.security java.security.bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到TLSv1这行，把TLSv1, TLSv1.1,删除后保存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jdk.tls.disabledAlgorithms=SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, \</span></span><br><span class="line"><span class="bash">sudo vi /etc/java-8-openjdk/security/java.security</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 保险起见手动结束进程</span></span><br><span class="line">sudo pkill -f jack-server </span><br><span class="line"><span class="meta">#</span><span class="bash"> 继续编译</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 20.04.3&lt;/li&gt;
&lt;li&gt;python 2.7.11&lt;/li&gt;
&lt;li&gt;android 7.1.2 r8&lt;</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/tags/Ubuntu/"/>
    
    <category term="android" scheme="https://www.sysxo.com/tags/android/"/>
    
    <category term="android 7.1.2_r8 源码编译" scheme="https://www.sysxo.com/tags/android-7-1-2-r8-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 访问 win10 共享文件夹</title>
    <link href="https://www.sysxo.com/Ubuntu/Ubuntu%20%E8%AE%BF%E9%97%AE%20win10%20%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.html"/>
    <id>https://www.sysxo.com/Ubuntu/Ubuntu%20%E8%AE%BF%E9%97%AE%20win10%20%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.html</id>
    <published>2021-11-22T05:10:00.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意-文件访问是个危险的操作-请在操作前清除明白的知道你在干什么"><a href="#注意-文件访问是个危险的操作-请在操作前清除明白的知道你在干什么" class="headerlink" title="注意: 文件访问是个危险的操作,请在操作前清除明白的知道你在干什么"></a>注意: 文件访问是个危险的操作,请在操作前清除明白的知道你在干什么</h2><h2 id="Window-10-开启文件夹网络共享"><a href="#Window-10-开启文件夹网络共享" class="headerlink" title="Window 10 开启文件夹网络共享"></a>Window 10 开启文件夹网络共享</h2><p>百度一下你就知道 太简单了</p><h2 id="Ubuntu-访问-Win10-网络共享"><a href="#Ubuntu-访问-Win10-网络共享" class="headerlink" title="Ubuntu 访问 Win10 网络共享"></a>Ubuntu 访问 Win10 网络共享</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y cifs-utils</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建挂载目录</span></span><br><span class="line">mkdir win_dev_tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo mount -t cifs //win10 ip/共享名称 /Ubuntu挂载目录 -o username=共享用户名,password=xxx,uid=1000,gid=1000,dir_mode=777,file_mode=777</span></span><br><span class="line">sudo mount -t cifs //10.0.0.xx/dev_tools /win_dev_tools -o username=mr00ff,password=xxx,uid=1000,gid=1000,dir_mode=777,file_mode=777</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo umount //win10 ip/共享名称 /Ubuntu挂载目录</span></span><br><span class="line">sudo umount //10.0.0.xxx/dev_tools /win_dev_tools</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注意-文件访问是个危险的操作-请在操作前清除明白的知道你在干什么&quot;&gt;&lt;a href=&quot;#注意-文件访问是个危险的操作-请在操作前清除明白的知道你在干什么&quot; class=&quot;headerlink&quot; title=&quot;注意: 文件访问是个危险的操作,请在操作前清除明白的知道</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/tags/Ubuntu/"/>
    
    <category term="windows 10" scheme="https://www.sysxo.com/tags/windows-10/"/>
    
    <category term="文件共享" scheme="https://www.sysxo.com/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04.2 安装 zsh + oh-my-zsh +自动补全</title>
    <link href="https://www.sysxo.com/Ubuntu/Ubuntu%20%E5%AE%89%E8%A3%85%20zsh.html"/>
    <id>https://www.sysxo.com/Ubuntu/Ubuntu%20%E5%AE%89%E8%A3%85%20zsh.html</id>
    <published>2021-11-06T16:10:00.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>zsh</li><li>oh-my-zsh</li><li>auto</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-安装-zsh"><a href="#1-安装-zsh" class="headerlink" title="1 安装 zsh"></a>1 安装 zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y zsh</span><br></pre></td></tr></table></figure><h3 id="2-安装-oh-my-zsh"><a href="#2-安装-oh-my-zsh" class="headerlink" title="2 安装  oh-my-zsh"></a>2 安装  oh-my-zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y git</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 shell 脚本为 zsh</span></span><br><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="3-安装自动补全-zsh-autosuggestions"><a href="#3-安装自动补全-zsh-autosuggestions" class="headerlink" title="3 安装自动补全  zsh-autosuggestions"></a>3 安装自动补全  zsh-autosuggestions</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑 .zshrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> plugin 增加 zsh-autosuggestions</span></span><br><span class="line">plugins=(...省略 zsh-autosuggestions)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 立刻生效</span></span><br><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><p>完成 撒花~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;oh-my-zsh&lt;/li&gt;
&lt;li&gt;auto&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/tags/Ubuntu/"/>
    
    <category term="zsh" scheme="https://www.sysxo.com/tags/zsh/"/>
    
    <category term="oh-my-zsh" scheme="https://www.sysxo.com/tags/oh-my-zsh/"/>
    
    <category term="命令行自动补全" scheme="https://www.sysxo.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    
    <category term="zsh-autosuggestions" scheme="https://www.sysxo.com/tags/zsh-autosuggestions/"/>
    
  </entry>
  
  <entry>
    <title>javascript 作用域详解</title>
    <link href="https://www.sysxo.com/javascript/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>https://www.sysxo.com/javascript/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F.html</id>
    <published>2021-06-18T09:48:22.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域-和-作用域链-链式作用域"><a href="#作用域-和-作用域链-链式作用域" class="headerlink" title="作用域 和 作用域链(链式作用域)"></a>作用域 和 作用域链(链式作用域)</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><ol><li>直接编写在script标签中的JS代码，都在全局作用域。</li><li>全局作用域在页面打开时创建，页面关闭时销毁。</li><li>全局作用域中只有一个全局对象<code>window</code>。他代表的是一个浏览器窗口，它由浏览器创建我们可以直接使用</li><li>在全局作用域中:<ol><li>创建变量都会作为<code> window</code>对象的属性保存 </li><li>创建的函数都会作为<code>window</code> 对象的方法保存</li></ol></li></ol><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><ol><li>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁。</li><li>每调用一次会创建一个新的函数作用域，他们之间是相互独立的</li><li>在函数作用域中可以访问到全局作用域的变量</li><li>当在函数作用域操作一个变量时:<ol><li>他会首先在自身作用域中寻找，如果有就直接使用</li><li>没有就向上一级作用域中寻找，直到找到全局作用域</li><li>如果全局作用域中依然没有找到，就会报错ReferenceError</li></ol></li></ol><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><ol><li>由<code>&#123;&#125;</code>界定的代码区域，let声明的变量具备可访问块作用域</li><li>允许块级作用域{}的任意嵌套</li></ol><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// xx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>参考博文:</p><p><a class="link"   href="https://blog.csdn.net/qq_46700766/article/details/114895482" >作用域（全局、函数、块作用域）作用域链<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;作用域-和-作用域链-链式作用域&quot;&gt;&lt;a href=&quot;#作用域-和-作用域链-链式作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域 和 作用域链(链式作用域)&quot;&gt;&lt;/a&gt;作用域 和 作用域链(链式作用域)&lt;/h3&gt;&lt;h4 id=&quot;全局作用域&quot;&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://www.sysxo.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://www.sysxo.com/tags/javascript/"/>
    
    <category term="作用域" scheme="https://www.sysxo.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>javascript 变量详解</title>
    <link href="https://www.sysxo.com/javascript/javascript%E5%8F%98%E9%87%8F.html"/>
    <id>https://www.sysxo.com/javascript/javascript%E5%8F%98%E9%87%8F.html</id>
    <published>2021-06-18T08:48:22.000Z</published>
    <updated>2022-07-19T13:43:16.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="var-定义"><a href="#var-定义" class="headerlink" title="var 定义"></a>var 定义</h4><h5 id="定义一个变量"><a href="#定义一个变量" class="headerlink" title="定义一个变量"></a>定义一个变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg;</span><br></pre></td></tr></table></figure><blockquote><p>定义但不初始化的情况,变量会保存一个特殊值 <code>undefined</code> </p></blockquote><h5 id="定义变量-并初始化"><a href="#定义变量-并初始化" class="headerlink" title="定义变量 并初始化"></a>定义变量 并初始化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;hello word&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>像这样的初始化不会将变量标识为 <strong>字符串类型</strong>, 只是一个简单的复制, 你可以随时改变保存的值,也可以改变值的类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">msg = <span class="number">250</span>; <span class="comment">// 合法 但不推荐!</span></span><br></pre></td></tr></table></figure><h5 id="定义多个变量"><a href="#定义多个变量" class="headerlink" title="定义多个变量"></a>定义多个变量</h5><p>声明多个变量可用 <code>,</code> 号分割每个变量 (可选是否初始化)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">var</span> demo,name,msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;1231&quot;</span>,</span><br><span class="line">    name = <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age = <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    isStudy = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="var-作用域"><a href="#var-作用域" class="headerlink" title="var 作用域"></a>var 作用域</h4><h5 id="var-定义的变量会成为包含它的函数所属的局部变量"><a href="#var-定义的变量会成为包含它的函数所属的局部变量" class="headerlink" title="var 定义的变量会成为包含它的函数所属的局部变量**"></a>var 定义的变量会成为包含它的函数所属的局部变量**</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&quot;test&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(msg); <span class="comment">// 报错 msg 为 undefined 未定义</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>msg</code>变量 为 <code>test</code> 函数内部 使用 <code>var</code> 定义的. 调用 <code>test</code> 函数 会创建 <code>msg</code> 这个变量并给它赋值,调用后变量即被销毁,所以 在 函数外部调用 <code>msg</code> 这个变量会导致错误</p></blockquote><h5 id="函数内部定义变量时省略-var-操作符-可以创建一个全局变量"><a href="#函数内部定义变量时省略-var-操作符-可以创建一个全局变量" class="headerlink" title="函数内部定义变量时省略 var 操作符 可以创建一个全局变量"></a>函数内部定义变量时省略 <code>var</code> 操作符 可以创建一个全局变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  msg = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(msg); <span class="comment">// 输出 hi</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>去掉 <code>var</code> 操作符后, <code>msg</code> 就变成了全局变量, 只要调用一次 test() 就会定义这个变量, 并且可以在 函数外部访问</strong></p><p>注意:</p><p>不要这样定义全局函数,很容易遗漏!!!!</p><p>不要这样定义全局函数,很容易遗漏!!!!</p><p>不要这样定义全局函数,很容易遗漏!!!!</p><p>在严格模式下.如果给这样未声明的变量赋值,会抛出 <code>ReferenceError</code> 错误</p></blockquote><h4 id="var-声明提升"><a href="#var-声明提升" class="headerlink" title="var 声明提升"></a>var 声明提升</h4><p>使用 <code>var</code> 关键词 声明的变量会自动提升到函数作用域顶部,所以下面书写的代码不会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以不会报错, 是因为 <code>ECMAScript</code> 运行时会把它看成等价于如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这就是所谓的 <code>提升(hoist)</code> , 也就是把所有变量声明都啦到函数作用域顶部</strong></p></blockquote><h5 id="反复多次使用-var-声明同一个变量也没问题"><a href="#反复多次使用-var-声明同一个变量也没问题" class="headerlink" title="反复多次使用 var 声明同一个变量也没问题"></a>反复多次使用 var 声明同一个变量也没问题</h5><p>运行时 变量结果会读取最后一次赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">99</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><hr><h4 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h4><p><code>let</code> 和 <code>var</code> 的区别是 <code>let</code> 声明的范围是 <code>块作用域</code>,而 <code>var</code> 声明的范围是 <code>函数作用域</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">// 块作用域开始</span></span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">11</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">// 11</span></span><br><span class="line">    <span class="comment">// 块作用域结束</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError age 没有定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>使用 <code>let</code> 定义的变量不能再 <code>if</code> 块 外部被引用, 是因为它的作用域限于该块的内部</strong></p><p>块作用域是函数作用域的子集, 因此 <code>var</code> 的作用域限制同样也适用于 <code>let</code></p></blockquote><h5 id="let-也不允许在同一个块作用域内重复声明遍变量"><a href="#let-也不允许在同一个块作用域内重复声明遍变量" class="headerlink" title="let 也不允许在同一个块作用域内重复声明遍变量"></a><code>let</code> 也不允许在同一个<code>块作用域</code>内重复声明遍变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// SyntaxError 标识符 age 已经声明过了</span></span><br></pre></td></tr></table></figure><p><code>let</code> 和 <code>var</code> 嵌套使用示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// zhangsan</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// lisi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>javascript 引擎会记录用于变量声明的标识符和其所在的块作用域, 因此嵌套的标识符不会报错,而是因为同一个块中没有重复声明</p></blockquote><h5 id="let-和-var-这两个关键词声明的并不是不同类型的变量-它们只是指出变量在相关作用域如何存在"><a href="#let-和-var-这两个关键词声明的并不是不同类型的变量-它们只是指出变量在相关作用域如何存在" class="headerlink" title="let 和 var 这两个关键词声明的并不是不同类型的变量,它们只是指出变量在相关作用域如何存在"></a><code>let</code> 和 <code>var</code> 这两个关键词声明的并不是不同类型的变量,它们只是指出变量在相关作用域如何存在</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">let</span> name; <span class="comment">// SyntaxError  语法错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">// SyntaxError 语法错误</span></span><br></pre></td></tr></table></figure><h4 id="let-和-var-的区别"><a href="#let-和-var-的区别" class="headerlink" title="let 和 var 的区别"></a><code>let</code> 和 <code>var</code> 的区别</h4><h5 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h5><p><code>let</code> 和 <code>var</code> 的另一个重要的区别, 就是 <code>let</code> 声明的变量不会在作用域中被提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会背提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError age 未定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">19</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在解析代码时, JavaScript 引擎也会注意出现在块后面的 <code>let</code> 声明, 只不过在此之前不能以任何方式来引用未声明的变量</strong></p><p><strong>在 let 声明前的执行瞬间被称为 <code>暂时性死区(temporal dead zone)</code> , 所以 在此阶段引用任何后面才声明的变量则会抛出 ReferenceError</strong></p><p> 使用 let声明变量 必须要按照 先声明 后使用的原则!</p><p> 使用 let声明变量 必须要按照 先声明 后使用的原则!</p><p> 使用 let声明变量 必须要按照 先声明 后使用的原则!</p></blockquote><h5 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h5><p>与 <code>var</code> 关键词不同, 使用 <code>let</code> 在全局作用域中声明的变量 不会成为 <code>window</code> 对象的属性 (<code>var</code> 声明的变量则会)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>不过, let 声明任然是在全局作用域中发生的, 相应变量会在页面的生命周期内存续, 因此, 为了避免 SyntaxError , 必须要保证页面不会重复声明同一个变量</strong></p></blockquote><h5 id="声明条件"><a href="#声明条件" class="headerlink" title="声明条件"></a>声明条件</h5><p><strong>使用 <code>var</code> 声明变量时, 由于声明会被提升, JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明.</strong> </p><p><strong>因为 let 的作用域是块 ,所以不可能检查前面是否使用的 let 声明过同名变量也就不可能在没有声明的情况下声明它</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; </span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">26</span>; </span><br><span class="line">&lt;/script&gt; </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 假设脚本不确定页面中是否已经声明了同名变量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 那它可以假设还没有声明过</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>; </span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 这里没问题，因为可以被作为一个提升声明来处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 不需要检查之前是否声明过同名变量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> age = <span class="number">36</span>; </span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 如果 age 之前声明过，这里会报错</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>使用 try/catch 语句 或 typeof 操作符也不能解决, 因为 条件块中 let 声明的作用域 仅限于 该块.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"> <span class="keyword">let</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; </span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">36</span>; </span><br><span class="line">&lt;/script&gt; </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 假设脚本不确定页面中是否已经声明了同名变量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 那它可以假设还没有声明过</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// name 被限制在 if &#123;&#125; 块的作用域内</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">let</span> name; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 因此这个赋值形同全局赋值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   name = <span class="string">&#x27;Matt&#x27;</span>; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">try</span> &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="built_in">console</span>.log(age); <span class="comment">// 如果 age 没有声明过，则会报错</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">catch</span>(error) &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">let</span> age;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// age 被限制在 catch &#123;&#125;块的作用域内</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 因此这个赋值形同全局赋值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   age = <span class="number">26</span>; </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="for-循环中的-let-声明"><a href="#for-循环中的-let-声明" class="headerlink" title="for 循环中的 let 声明"></a>for 循环中的 let 声明</h5><p>在 let 出现前 , for 循环定义的迭代变量 会渗透到循环体外部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>改用 let 之后,这个问题就消失了, 因为 迭代变量的作用域仅限于 for 循环块内部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i;i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError i 未定义</span></span><br></pre></td></tr></table></figure><p>在使用 var 的时候,最常见的问题就是对迭代变量的奇特声明和修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i;i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> <span class="built_in">console</span>.log(i),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你以为可能会输出 0,1,2,3,4</span></span><br><span class="line"><span class="comment">// 实际上会输出 5,5,5,5,5</span></span><br></pre></td></tr></table></figure><blockquote><p>之所以这样 是因为在退出循环时, 迭代变量保存的是导致循环退出的值 : 5 , 在之后的执行超市逻辑时, 所有的 i 都是同一个变量,因而输出的都是同一个最终值</p></blockquote><p><strong>使用 let 迭代变量时, JavaScript 引擎在后台会为每一个迭代循环声明一个新的迭代变量</strong></p><p>每个 setTimeout 引用的都是不同的变量实例, 所以 console.log 输出的是我们期望的值,也就是循环过程中每个迭代变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i),</span><br><span class="line">    <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会输出 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><blockquote><p>这种迭代声明一个独立变量实例的行为适用于所有风格的 for 循环, 包括 for-in 和 for-of 循环</p></blockquote><hr><h4 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h4><p> <code>const </code>的行为与 <code>let</code> 基本相同, 唯一一个重要的区别就是 用 <code>const</code> 来声明变量时必须同时初始化变量,且 尝试修改 <code>const</code> 声明的变量会导致运行时错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">11</span>;</span><br><span class="line">age = <span class="number">22</span>; <span class="comment">// TypeError 给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;pp&quot;</span>; <span class="comment">// SyntaxError </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;oo&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;xx&quot;</span>; </span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// xx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// oo</span></span><br></pre></td></tr></table></figure><p>const 声明的限制只适用于它指向的变量的引用,换句话说, 如果 const 变量引用的是一个对象, 那么修改这个对象内部的属性并不违反 const 的限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 这是可以的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例, 虽然 const 变量 和 let 变量 很相似, 但是不能用 const 来声明迭代变量 (因为迭代变量会自增)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure><p>不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对 for-of 和 for-in 循环特别有意义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(j); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(key); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// a, b </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(value); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><blockquote><p>在 for 循环块作用域中,只是使用 const 声明变量,不重复赋值也是可以用的</p><p>所谓特别的意义</p><p>const 的作用域仅限于 块,那么 可以在 for 作用域中 用 const 来声明变量,达到不反复开辟内存的作用</p></blockquote><hr><h4 id="声明风格及最佳实践"><a href="#声明风格及最佳实践" class="headerlink" title="声明风格及最佳实践"></a>声明风格及最佳实践</h4><p><code>ECMAScript 6</code> 增加 let 和 const 从客观上为这门语言更精准的声明作用域和语义提供了更友好的支持,行为怪异的 var 所造成的各种问题 已经让 JavaScript 社区为之苦恼很多年, 随着这两个新关键词的出现, 新的 有助于提升代码质量的最佳实践也逐渐显现,</p><p>1, 不使用 var</p><p>​    有了 let  和 const , 大多数开发者会发现自己不再需要 var 了, 限制自己只使用 let  和 const 有助于提升代码质量, 因为变量有了明确的作用域, 声明位置, 以及不变的值</p><p>2, const 优先, let 次之</p><p> 使用 const 声明可以让浏览器运行时强制保持变量不变, 也可以让静态代码分析工具提前发现不合法的赋值操作. 因此 很多开发者认为应该优先使用 const 来声明变量, 只在前提知道未来会有修改时,再使用 let ,这样可以让开发者更有信心的推断某些变量的值永远不会变, 同时也能迅速发现因为意外赋值导致的非预期行为</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;h4 id=&quot;var-定义&quot;&gt;&lt;a href=&quot;#var-定义&quot; class=&quot;headerlink&quot; title=&quot;var 定义&quot;&gt;&lt;/a&gt;v</summary>
      
    
    
    
    <category term="javascript" scheme="https://www.sysxo.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://www.sysxo.com/tags/javascript/"/>
    
    <category term="变量" scheme="https://www.sysxo.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>javascript 严格模式</title>
    <link href="https://www.sysxo.com/javascript/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://www.sysxo.com/javascript/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html</id>
    <published>2021-06-18T05:22:13.000Z</published>
    <updated>2022-07-19T13:43:16.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>ECMAScript 5</code> 增加了严格模式（strict mode）的概念。严格模式是一种不同的 <code>JavaScript</code> 解析和执<br>行模型，<code>ECMAScript 3</code> 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="整个脚本启用"><a href="#整个脚本启用" class="headerlink" title="整个脚本启用"></a>整个脚本启用</h5><p>整个脚本启用严格模式，在脚本开头加上这一行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; </span><br></pre></td></tr></table></figure><h5 id="指定函数内启用"><a href="#指定函数内启用" class="headerlink" title="指定函数内启用"></a>指定函数内启用</h5><p>指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="meta"> &quot;use strict&quot;</span>; </span><br><span class="line"> <span class="comment">// 函数体</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>严格模式是一个预处理指令,任何支持 <code>javascript</code>的引擎看到他都会切换到严格模式,启用严格模式的目的是不破坏 <code>ECMAScript 3</code> 语法,并且杜绝不规范的写法,如若出现或发生不安全的活动将抛出错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;严格模式&quot;&gt;&lt;a href=&quot;#严格模式&quot; class=&quot;headerlink&quot; title=&quot;严格模式&quot;&gt;&lt;/a&gt;严格模式&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h</summary>
      
    
    
    
    <category term="javascript" scheme="https://www.sysxo.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://www.sysxo.com/tags/javascript/"/>
    
    <category term="严格模式" scheme="https://www.sysxo.com/tags/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>应用清单 (AndroidManifest) 介绍</title>
    <link href="https://www.sysxo.com/android/%E5%BA%94%E7%94%A8%E6%B8%85%E5%8D%95%20(AndroidManifest)%20%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://www.sysxo.com/android/%E5%BA%94%E7%94%A8%E6%B8%85%E5%8D%95%20(AndroidManifest)%20%E4%BB%8B%E7%BB%8D.html</id>
    <published>2021-06-11T03:00:53.000Z</published>
    <updated>2022-07-19T13:43:16.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用清单-AndroidManifest-xml"><a href="#应用清单-AndroidManifest-xml" class="headerlink" title="应用清单 (AndroidManifest.xml)"></a>应用清单 (AndroidManifest.xml)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>每个应用项目必须在<a class="link"   href="https://developer.android.com/studio/build#sourcesets" >项目源设置<i class="fas fa-external-link-alt"></i></a>的根目录中加入 <code>AndroidManifest.xml</code> 文件（且必须使用此名称）。 </p><p><strong>清单文件会向 Android 构建工具、Android 操作系统和 Google Play 描述应用的基本信息。</strong></p><hr><h2 id="文件功能"><a href="#文件功能" class="headerlink" title="文件功能"></a>文件功能</h2><p><code>AndroidManifest.xml</code> 需要声明已下内容:</p><ul><li><strong>应用的软件包名称，其通常与代码的命名空间相匹配</strong>。<ul><li> 构建项目时，Android 构建工具会使用此信息来确定代码实体的位置。 打包应用时，构建工具会使用 Gradle 构建文件中的应用 ID 来替换此值，而此 ID 则用作系统和 Google Play 上的唯一应用标识符。<a class="link"   href="https://developer.android.com/guide/topics/manifest/manifest-intro#package-name" >了解关于软件包名称和应用 ID 的更多内容<i class="fas fa-external-link-alt"></i></a>。</li></ul></li><li><strong>应用的组件，包括所有 Activity、服务、广播接收器和内容提供程序</strong>。 <ul><li>每个组件都必须定义基本属性，例如其 Kotlin 或 Java 类的名称。 清单文件还能声明一些功能，例如其所能处理的设备配置，以及描述组件如何启动的 Intent 过滤器。<a class="link"   href="https://developer.android.com/guide/topics/manifest/manifest-intro#components" >了解关于应用组件的更多内容<i class="fas fa-external-link-alt"></i></a>。</li></ul></li><li><strong>应用为访问系统或其他应用的受保护部分所需的权限</strong>。<ul><li> 如果其他应用想要访问此应用的内容，则清单文件还会声明其必须拥有的权限。 <a class="link"   href="https://developer.android.com/guide/topics/manifest/manifest-intro#perms" >了解关于权限的更多内容<i class="fas fa-external-link-alt"></i></a>。</li></ul></li><li><strong>应用需要的硬件和软件功能</strong>，这些功能会影响哪些设备能够从 Google Play 安装应用。<a class="link"   href="https://developer.android.com/guide/topics/manifest/manifest-intro#compatibility" >了解关于设备兼容性的更多内容<i class="fas fa-external-link-alt"></i></a>。</li></ul><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://developer.android.com/guide/topics/manifest/manifest-intro#reference" >元素参考<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用清单-AndroidManifest-xml&quot;&gt;&lt;a href=&quot;#应用清单-AndroidManifest-xml&quot; class=&quot;headerlink&quot; title=&quot;应用清单 (AndroidManifest.xml)&quot;&gt;&lt;/a&gt;应用清单 (Androi</summary>
      
    
    
    
    <category term="android" scheme="https://www.sysxo.com/categories/android/"/>
    
    
    <category term="Android" scheme="https://www.sysxo.com/tags/Android/"/>
    
    <category term="AndroidManifest.xml" scheme="https://www.sysxo.com/tags/AndroidManifest-xml/"/>
    
    <category term="xml" scheme="https://www.sysxo.com/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>keep 主题 修复 友链不显示 css 不正常</title>
    <link href="https://www.sysxo.com/Hexo/keep%20%E4%B8%BB%E9%A2%98%20%E4%BF%AE%E5%A4%8D%20%E5%8F%8B%E9%93%BE%E4%B8%8D%E6%98%BE%E7%A4%BA%20css%20%E4%B8%8D%E6%AD%A3%E5%B8%B8.html"/>
    <id>https://www.sysxo.com/Hexo/keep%20%E4%B8%BB%E9%A2%98%20%E4%BF%AE%E5%A4%8D%20%E5%8F%8B%E9%93%BE%E4%B8%8D%E6%98%BE%E7%A4%BA%20css%20%E4%B8%8D%E6%AD%A3%E5%B8%B8.html</id>
    <published>2021-06-07T09:10:53.000Z</published>
    <updated>2022-07-19T13:43:16.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p> 本来高高兴兴搭建好和朋友挂友链来着,一顿操作.更新好友链页面一片空白..</p><p>这是什么道理呢?..天地良心 我可是 <code>git</code> 下来啥也没动哦</p><hr><h3 id="修复友链"><a href="#修复友链" class="headerlink" title="修复友链"></a>修复友链</h3><p><strong>女(程)人(序) 的心思你别猜,来先看看文档</strong>!!</p><p><a class="link"   href="https://keep-docs.xpoet.cn/usage-tutorial/advanced.html#%E5%8F%8B%E9%93%BE%E6%A0%B7%E5%BC%8F" >keep 友链文档<i class="fas fa-external-link-alt"></i></a></p><p><code>keep</code> 主要应用到 <code>hexo </code> 提供  <code>_data</code> 功能</p><p><a href="https://hexo.io/zh-cn/docs/data-files"><code>_data</code>文件夹  Hexo 给出的解释</a></p><p>个人理解即是: <code>_data</code> 将 信息多,复用多的 <code>资料,配置</code> 抽离出来,方便存储和调用</p><p>了解的功能和实现,.现在就开始爬坑吧…</p><p>问题:</p><ol><li><code>hexo</code> 主题 目录,原理,语法</li><li>看看 <code>keep</code> 到底卡那了</li></ol><h4 id="hexo-主题-目录-原理-语法"><a href="#hexo-主题-目录-原理-语法" class="headerlink" title="hexo 主题 目录,原理,语法"></a><code>hexo</code> 主题 目录,原理,语法</h4><p><a class="link"   href="https://hexo.io/zh-cn/docs/themes" >Hexo 主题 文档<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://hexo.io/zh-cn/docs/templates" >Hexo 模板 文档<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://hexo.io/zh-cn/docs/helpers" >Hexo 助手函数<i class="fas fa-external-link-alt"></i></a></p><p>过一眼这个三个我们接着往下看</p><p><strong>模板文档</strong> 这一章节开篇明义</p><blockquote><p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名</p></blockquote><p>得知 模板必须在 <code>index.ejs</code> 文件做加载</p><p>本文已 <code>keep</code> 为例</p><p>抽丝剥茧下来 加载顺序为</p><blockquote><p>index -&gt; page </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件位置</span></span><br><span class="line">themes/keep/layout/index.ejs</span><br><span class="line">themes/keep/layout/page.ejs</span><br></pre></td></tr></table></figure><p>打开 <code>page.ejs</code>, 似乎没看到 和 <code>Link</code> 渲染有关,代码量不大,</p><p>顺下逻辑 真相只有一个 那就是在 <code>_partial/page-template</code> 这个<code>局部模板</code>中</p><p>好家伙,我直接好家伙.直接真相 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="keyword">const</span> isLoadFriendsLink = (</span><br><span class="line">  theme.menu.hasOwnProperty(<span class="string">&#x27;Links&#x27;</span>)</span><br><span class="line">  &amp;&amp; theme.menu.Links</span><br><span class="line">  &amp;&amp; theme.links</span><br><span class="line">  &amp;&amp; (page.type === <span class="string">&#x27;links&#x27;</span> || page.type === <span class="string">&#x27;link&#x27;</span> || page.title === <span class="string">&#x27;links&#x27;</span> || page.title === <span class="string">&#x27;link&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">&lt;% <span class="keyword">if</span> (isLoadFriendsLink) &#123; %&gt;</span><br><span class="line">  &lt;%- partial(<span class="string">&#x27;_partial/friends-link&#x27;</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>source/links/index.md</code> 文件的 <code>title</code> 属性不要修改！<br>友链样式根据 <code>title: links</code> 来匹配！  – 来自 keep 文档</p></blockquote><p>修复结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoadFriendsLink = (page.title === <span class="string">&#x27;links&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>跑起来~ 完美 家人们的链接出现了 等等 好像有新的问题</strong></p><hr><h3 id="修复-友链-CSS"><a href="#修复-友链-CSS" class="headerlink" title="修复 友链 CSS"></a>修复 友链 CSS</h3><p>修复友链显示后 刷新页面 发现 <code>css</code> 错位,</p><p><strong>定位 <code>css</code> 加载文件</strong></p><p><code>/项目/themes/keep/source/css/layout/_partial/page-template.styl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 省略..</span></span><br><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">&#x27;menu.Links&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment"># 省略..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 省略..</span></span><br></pre></td></tr></table></figure><p><strong>处理方法</strong></p><p>删除 <code>if (hexo-config(&#39;menu.Links&#39;)) &#123;</code> 这个逻辑判断</p><p><strong>重新 编译 跑起来 完美</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;p&gt; 本来高高兴兴搭建好和朋友挂友链来着,一顿操作.更新好友链页面一片空白..&lt;/p&gt;
&lt;p&gt;这是什么道理呢?..天地良心 我可是 &lt;code&gt;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.sysxo.com/categories/Hexo/"/>
    
    
    <category term="node" scheme="https://www.sysxo.com/tags/node/"/>
    
    <category term="Hexo" scheme="https://www.sysxo.com/tags/Hexo/"/>
    
    <category term="keep" scheme="https://www.sysxo.com/tags/keep/"/>
    
  </entry>
  
  <entry>
    <title>hexo 安装 keep 主题</title>
    <link href="https://www.sysxo.com/Hexo/hexo%20%E5%AE%89%E8%A3%85%20keep%20%E4%B8%BB%E9%A2%98.html"/>
    <id>https://www.sysxo.com/Hexo/hexo%20%E5%AE%89%E8%A3%85%20keep%20%E4%B8%BB%E9%A2%98.html</id>
    <published>2021-06-07T03:00:53.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一款简约且优雅的 Hexo 主题</p><p>是我喜欢的风格..不过对应 <code>hexo &gt;= 5.0</code> 有点问题需要修复,后续会补充博客 <a href="https://www.sysxo.com/">mr00ff’s blog</a> 欢迎莅临</p><hr><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>hexo: 5.4.0<br>hexo-cli: 4.2.0<br>node: 14.16.1</p></blockquote><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a class="link"   href="https://keep-docs.xpoet.cn/" >hexo-theme-keep<i class="fas fa-external-link-alt"></i></a></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方推荐两种方式 </p><p><strong>npm 方式</strong> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">npm install hexo-theme-keep</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>node_modules</code> 安装 <code>hexo-theme-keep</code> ,</p><p>在新增自定义配置文件的情况,<code>hexo-theme-keep</code> 下的配置文件不会被覆盖</p><p>我也是纠结了一会才发现这个问题</p></blockquote><p><strong>git 方式 (  推荐  )</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexo-site</span><br><span class="line">git clone https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure><blockquote><p>安装文件在 项目路径下 <code>themes/keep</code> 文件夹,</p><p>推荐理由两个:</p><ol><li>方便后续升级</li><li>可以自己随心改 (请慎重)</li></ol><p>支持 <code>hexo &gt;= 5.0.0</code>的自定义子配置(这个配置很灵活), 具体功能请看 <a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >hexo 配置文档<i class="fas fa-external-link-alt"></i></a> 搜索 <code>_config.[theme].yml</code></p></blockquote><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>复制一份 <code>keep</code> 的全部配置 到 项目根目录做备用</p><p>后续更改配置只需要更改 <code>/项目路径/_config.keep.yml</code> 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a /项目路径/themes/keep/_config.yml /项目路径/_config.keep.yml</span><br></pre></td></tr></table></figure><p>编辑 <code>hexo</code> 项目的全局配置 <code>_config.yml</code> 中 <code>theme</code>的值 为 <code>keep</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">keep</span></span><br><span class="line"><span class="comment"># ....</span></span><br></pre></td></tr></table></figure><hr><p><strong>最后….跑起来看看啊 你还在期待什么?</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;一款简约且优雅的 Hexo 主题&lt;/p&gt;
&lt;p&gt;是我喜欢的风格..不过对应 &lt;code&gt;hexo &amp;gt;= 5.0&lt;/code&gt; 有点问题</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.sysxo.com/categories/Hexo/"/>
    
    
    <category term="node" scheme="https://www.sysxo.com/tags/node/"/>
    
    <category term="Hexo" scheme="https://www.sysxo.com/tags/Hexo/"/>
    
    <category term="keep" scheme="https://www.sysxo.com/tags/keep/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04.2 安装 Python3 和 pyenv 快速入门</title>
    <link href="https://www.sysxo.com/Ubuntu/Ubuntu%20%E5%AE%89%E8%A3%85%20Python%20%E5%92%8C%20pyenv%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>https://www.sysxo.com/Ubuntu/Ubuntu%20%E5%AE%89%E8%A3%85%20Python%20%E5%92%8C%20pyenv%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html</id>
    <published>2021-06-06T16:10:00.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<p>新电脑百废待兴 .备忘.特此记录 救救孩子吧…</p><p><strong>环境介绍</strong></p><blockquote><p>OS: Ubuntu 20.04.2</p><p>Python: 3.9.5 Stable</p></blockquote><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python 下载链接</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tar.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压 (7z x 个人觉得方便,可以自己了解一下 7z和 tar 的区别哈)</span></span><br><span class="line">7z x Python-3.9.5.tar.xz</span><br><span class="line"></span><br><span class="line">7z x Python-3.9.5.tar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 依赖库 一定要装 否则后面一堆错</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进安装目录</span></span><br><span class="line">cd /Python-3.9.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加权限</span></span><br><span class="line">chmod +x configure</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行配置 安装在指定目录./configure --prefix=/usr/python</span></span><br><span class="line">./configure </span><br><span class="line"><span class="meta">#</span><span class="bash"> running....</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译 -j 多核心编译</span></span><br><span class="line">sudo make -j 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认会装好 pip3.9</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先升级一波</span></span><br><span class="line">/usr/local/bin/python3.9 -m pip install --upgrade pip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pip 国内加速</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建pip目录</span></span><br><span class="line">mkdir ~/.pip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制执行以下内容</span></span><br><span class="line">cat &gt; ~/.pip/pip.conf &lt;&lt; EOF</span><br><span class="line">[global]</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="安装-pyenv"><a href="#安装-pyenv" class="headerlink" title="安装 pyenv"></a>安装 pyenv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 下载到 用户目录</span></span><br><span class="line">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑 pyenv 目录到  ~/.bashrc</span></span><br><span class="line">sudo vi ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加</span></span><br><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init --path)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 立即生效</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 pyenv-virtualenv 插件 (可选)</span></span><br><span class="line">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br><span class="line">echo &#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="pyenv-常用命令"><a href="#pyenv-常用命令" class="headerlink" title="pyenv 常用命令"></a>pyenv 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方介绍完整版 https://github.com/pyenv/pyenv/blob/master/COMMANDS.md</span></span><br><span class="line">pyenv install --list # 列出可安装版本</span><br><span class="line">pyenv install &lt;version&gt; # 安装对应版本</span><br><span class="line">pyenv install -v &lt;version&gt; # 安装对应版本，若发生错误，可以显示详细的错误信息</span><br><span class="line">pyenv versions # 显示当前使用的python版本</span><br><span class="line">pyenv which python # 显示当前python安装路径</span><br><span class="line">pyenv global &lt;version&gt; # 设置默认Python版本</span><br><span class="line">pyenv local &lt;version&gt; # 当前路径创建一个.python-version, 以后进入这个目录自动切换为该版本</span><br><span class="line">pyenv shell &lt;version&gt; # 当前shell的session中启用某版本，优先级高于global 及 local</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新电脑百废待兴 .备忘.特此记录 救救孩子吧…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境介绍&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OS: Ubuntu 20.04.2&lt;/p&gt;
&lt;p&gt;Python: 3.9.5 Stable&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="https://www.sysxo.com/tags/Ubuntu/"/>
    
    <category term="Python" scheme="https://www.sysxo.com/tags/Python/"/>
    
    <category term="Python3" scheme="https://www.sysxo.com/tags/Python3/"/>
    
    <category term="Pyenv" scheme="https://www.sysxo.com/tags/Pyenv/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 快速入门</title>
    <link href="https://www.sysxo.com/Hexo/Hexo%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>https://www.sysxo.com/Hexo/Hexo%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html</id>
    <published>2021-06-06T06:00:00.000Z</published>
    <updated>2022-07-19T13:43:16.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><pre><code>     Hexo 是一个快速、简单且功能强大的博客框架。     你用 Markdown（或其他标记语言）写帖子，     Hexo 会在几秒钟内生成带有漂亮主题的静态文件。</code></pre></blockquote><p><strong>个人理解:</strong></p><p><code>hexo</code> 是一个解释器,将 标记语言(<code>markdown</code> 等.) 转化成 <code> html</code> 代码,并赋能 分类,标签,评论,搜索 等 <strong>博客功能</strong> 进行集中管理,是一个非常轻便管理工具.</p><hr><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a class="link"   href="https://hexo.io/" >hexo<i class="fas fa-external-link-alt"></i></a></p><p><strong>注意:</strong></p><blockquote><p>环境介绍:</p><p>hexo: 5.4.0<br>hexo-cli: 4.2.0<br>node: 14.16.1</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 手脚架</span></span><br><span class="line">npm i -g hexo-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化项目</span></span><br><span class="line">hexo init hexo-frist-project</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行服务</span></span><br><span class="line">hexo s -o</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恭喜你拥抱了 Hexo</span> </span><br></pre></td></tr></table></figure><hr><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动博客服务</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成静态页面</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">hexo --help</span><br><span class="line">INFO  Validating config</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存</span></span><br><span class="line">  clean     Remove generated files and cache.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 获取当前 config 内容</span></span><br><span class="line">  config    Get or set configurations.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 发布博客到网页</span></span><br><span class="line">  deploy    Deploy your website.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 生成静态文件</span></span><br><span class="line">  generate  Generate static files.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 查看命令帮助</span></span><br><span class="line">  help      Get help on a command.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 创建新项目</span></span><br><span class="line">  init      Create a new Hexo folder.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 列出站点信息</span></span><br><span class="line">  list      List the information of the site</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 从其他站点迁移到 Hexo</span></span><br><span class="line">  migrate   Migrate your site from other system to Hexo.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 创建新页面</span></span><br><span class="line">  new       Create a new post.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 从草稿箱发布</span></span><br><span class="line">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 使用渲染插件渲染文件</span></span><br><span class="line">  render    Render files with renderer plugins.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 开启服务</span></span><br><span class="line">  server    Start the server.</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 查看版本</span></span><br><span class="line">  version   Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Hexo 是一个快速、简单且功能强大的博客框架。你用 Markdown（或其他标记语言）写帖子，Hexo 会在几秒钟内生成带有漂亮主题的静态文件。</summary>
    
    
    
    <category term="Hexo" scheme="https://www.sysxo.com/categories/Hexo/"/>
    
    
    <category term="node" scheme="https://www.sysxo.com/tags/node/"/>
    
    <category term="Hexo" scheme="https://www.sysxo.com/tags/Hexo/"/>
    
    <category term="hexo-cli" scheme="https://www.sysxo.com/tags/hexo-cli/"/>
    
  </entry>
  
</feed>
